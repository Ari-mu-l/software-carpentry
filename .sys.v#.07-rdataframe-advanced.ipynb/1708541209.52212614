{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "60ae38e3",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# RDataFrame advanced features\n",
    "There are many more features available with the RDataFrame that might serve your analysis needs!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e8e9ace",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Working with `numpy` arrays\n",
    "- RDataFrame offers interoperability with `numpy` arrays. \n",
    "\n",
    "- It can be created from a dictionary of such arrays and it can also export its contents to the same format. \n",
    "\n",
    "- All operations are available also when using the `numpy`-based dataset.\n",
    "\n",
    "- **Note:** this support is limited to one-dimensional numpy arrays, which are directly mapped to columns in the RDataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "128e586a",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns in the RDataFrame: { \"a\", \"b\", \"c\" }\n"
     ]
    }
   ],
   "source": [
    "import numpy\n",
    "import ROOT\n",
    "\n",
    "np_dict = {colname: numpy.random.rand(100) for colname in [\"a\",\"b\",\"c\"]}\n",
    "\n",
    "df = ROOT.RDF.FromNumpy(np_dict)\n",
    "\n",
    "print(f\"Columns in the RDataFrame: {df.GetColumnNames()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "dde693ee",
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows in the dataset: 100\n",
      "Average value of column a: 0.49883769291632474\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "co = df.Count()\n",
    "m_a = df.Mean(\"a\")\n",
    "\n",
    "fil1 = df.Filter(\"c < 0.7\")\n",
    "def1 = fil1.Define(\"d\", \"a+b+c\")\n",
    "h = def1.Histo1D(\"d\")\n",
    "\n",
    "c = ROOT.TCanvas()\n",
    "h.Draw()\n",
    "\n",
    "print(f\"Number of rows in the dataset: {co.GetValue()}\")\n",
    "print(f\"Average value of column a: {m_a.GetValue()}\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "493f8f3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.43957785566580226"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Try it!\n",
    "# To-do: Get the mean value of column \"c\"\n",
    "\n",
    "\n",
    "# The printout should be 0.43957785566580226"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "47a18efa",
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a': ndarray([0.88844238, 0.900535  , 0.96825323, 0.14714924, 0.65111047,\n",
       "          0.00768986, 0.33848759, 0.23674716, 0.89608948, 0.29994253,\n",
       "          0.2096464 , 0.64004154, 0.43697073, 0.29892036, 0.06817104,\n",
       "          0.05222412, 0.98122417, 0.98446942, 0.27117487, 0.13256602,\n",
       "          0.34084916, 0.23491009, 0.32068643, 0.72822042, 0.7710048 ,\n",
       "          0.8522306 , 0.85746265, 0.9200117 , 0.21378831, 0.77172578,\n",
       "          0.56352852, 0.96611382, 0.96412962, 0.37538235, 0.41918385,\n",
       "          0.80238554, 0.43830317, 0.15762997, 0.99523027, 0.484956  ,\n",
       "          0.90498863, 0.36807776, 0.13658789, 0.21365148, 0.00893957,\n",
       "          0.12407072, 0.07976361, 0.76622546, 0.46557753, 0.62036033,\n",
       "          0.41229638, 0.49840041, 0.4263415 , 0.61866683, 0.28776   ,\n",
       "          0.29497612, 0.35616968, 0.787211  , 0.38452214, 0.97618113,\n",
       "          0.80764095, 0.33833193, 0.6587734 , 0.78965527, 0.04997491,\n",
       "          0.59990502, 0.45309396, 0.83542956, 0.45840176, 0.99392861,\n",
       "          0.60004006, 0.86986565, 0.91787562, 0.61474074, 0.7811355 ,\n",
       "          0.31380488, 0.24182307]),\n",
       " 'b': ndarray([0.40702241, 0.74129923, 0.18107897, 0.09065073, 0.40322032,\n",
       "          0.97063978, 0.21297639, 0.42887613, 0.43430869, 0.20450665,\n",
       "          0.4827311 , 0.93090292, 0.45213087, 0.61341716, 0.94827759,\n",
       "          0.32355509, 0.52605221, 0.55971498, 0.14843606, 0.19361249,\n",
       "          0.76743236, 0.54955014, 0.1608052 , 0.35732976, 0.10466031,\n",
       "          0.36919999, 0.98070539, 0.16100484, 0.43800289, 0.67235598,\n",
       "          0.35587679, 0.52697685, 0.9707623 , 0.67721743, 0.22180804,\n",
       "          0.38284524, 0.73713499, 0.69246795, 0.9864423 , 0.49209006,\n",
       "          0.52224664, 0.18706242, 0.03163983, 0.22132215, 0.02014056,\n",
       "          0.26480848, 0.20888065, 0.01194962, 0.99694482, 0.13664396,\n",
       "          0.96677895, 0.9992432 , 0.44700017, 0.47300536, 0.35508057,\n",
       "          0.21134544, 0.36207256, 0.67414269, 0.56556399, 0.59445778,\n",
       "          0.81049597, 0.69884043, 0.24185121, 0.4260769 , 0.33305894,\n",
       "          0.29375287, 0.51446663, 0.44664262, 0.04449011, 0.37550639,\n",
       "          0.84642401, 0.29101479, 0.80835555, 0.81613266, 0.1983288 ,\n",
       "          0.44309051, 0.68206472]),\n",
       " 'c': ndarray([0.35895991, 0.41313578, 0.09144125, 0.55242407, 0.49622545,\n",
       "          0.10755882, 0.66708536, 0.60484859, 0.45592548, 0.03597389,\n",
       "          0.15037891, 0.64218227, 0.62531293, 0.4743205 , 0.54074605,\n",
       "          0.66245871, 0.19504631, 0.55872815, 0.62603898, 0.62278945,\n",
       "          0.47191909, 0.27665921, 0.08780504, 0.40654939, 0.02448357,\n",
       "          0.2445925 , 0.63726825, 0.1693742 , 0.38532064, 0.07505232,\n",
       "          0.22704283, 0.1076303 , 0.01053603, 0.07837568, 0.45967832,\n",
       "          0.65612722, 0.18710839, 0.28851356, 0.67912518, 0.31010392,\n",
       "          0.23792334, 0.44411362, 0.13242944, 0.66943208, 0.06716033,\n",
       "          0.31828849, 0.02585359, 0.31403326, 0.13483881, 0.58739558,\n",
       "          0.14621885, 0.31733806, 0.40617817, 0.28020789, 0.4454364 ,\n",
       "          0.64825316, 0.41845814, 0.3220973 , 0.10074278, 0.08453626,\n",
       "          0.2433915 , 0.11524202, 0.03907429, 0.64573901, 0.37400439,\n",
       "          0.51315129, 0.18486817, 0.39262204, 0.04734236, 0.38425521,\n",
       "          0.34725581, 0.02635418, 0.42556635, 0.27912792, 0.00782217,\n",
       "          0.57223289, 0.53282743]),\n",
       " 'd': ndarray([1.65442471, 2.05497002, 1.24077345, 0.79022404, 1.55055624,\n",
       "          1.08588846, 1.21854935, 1.27047188, 1.78632366, 0.54042307,\n",
       "          0.84275641, 2.21312672, 1.51441453, 1.38665801, 1.55719468,\n",
       "          1.03823793, 1.7023227 , 2.10291256, 1.04564991, 0.94896795,\n",
       "          1.5802006 , 1.06111945, 0.56929668, 1.49209957, 0.90014868,\n",
       "          1.46602309, 2.47543629, 1.25039074, 1.03711184, 1.51913408,\n",
       "          1.14644814, 1.60072098, 1.94542796, 1.13097546, 1.10067021,\n",
       "          1.841358  , 1.36254655, 1.13861147, 2.66079774, 1.28714999,\n",
       "          1.66515861, 0.9992538 , 0.30065716, 1.10440571, 0.09624046,\n",
       "          0.70716769, 0.31449785, 1.09220834, 1.59736116, 1.34439987,\n",
       "          1.52529419, 1.81498166, 1.27951983, 1.37188008, 1.08827698,\n",
       "          1.15457472, 1.13670038, 1.78345099, 1.05082891, 1.65517517,\n",
       "          1.86152842, 1.15241438, 0.9396989 , 1.86147118, 0.75703823,\n",
       "          1.40680918, 1.15242876, 1.67469422, 0.55023422, 1.75369021,\n",
       "          1.79371989, 1.18723463, 2.15179753, 1.71000132, 0.98728647,\n",
       "          1.32912828, 1.45671522])}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Export the modified dataframe to a dictionary of numpy arrays\n",
    "\n",
    "np_dict_mod = def1.AsNumpy()\n",
    "\n",
    "np_dict_mod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "591db200",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a': ndarray([0.89171103, 0.38538969, 0.62489645, 0.85250374, 0.271063  ,\n",
       "          0.04244154, 0.21981518, 0.00653207, 0.97577161, 0.70376849,\n",
       "          0.0855774 , 0.86017707, 0.94231746, 0.05599941, 0.07117043,\n",
       "          0.10774222, 0.34104324, 0.353957  , 0.53321741, 0.27640866,\n",
       "          0.65782067, 0.10603851, 0.90373479, 0.31969525, 0.61811717,\n",
       "          0.95470248, 0.86416954, 0.80392969, 0.32117697, 0.26929924,\n",
       "          0.08533137, 0.29992891, 0.17906622, 0.87616529, 0.70625461,\n",
       "          0.75393689, 0.1152033 , 0.92028508, 0.39672788, 0.43665752,\n",
       "          0.0140612 , 0.02428224, 0.0589956 , 0.13687369, 0.23926276,\n",
       "          0.59236442, 0.74901958, 0.9128569 , 0.26936721, 0.5146416 ,\n",
       "          0.01772699, 0.07026257, 0.72839134, 0.71351605, 0.87727638,\n",
       "          0.97041711, 0.22194914, 0.55887689, 0.95146264, 0.08724645,\n",
       "          0.48637192, 0.74417467, 0.53688302, 0.6725586 , 0.1941396 ,\n",
       "          0.97645349, 0.18868174, 0.80977102, 0.47304493, 0.59022976,\n",
       "          0.97999293, 0.68230194, 0.79129258, 0.77586358, 0.35684928,\n",
       "          0.896175  , 0.13125804]),\n",
       " 'b': ndarray([1.96208486e-01, 2.17796710e-01, 1.86359240e-01, 1.34852425e-01,\n",
       "          8.31525676e-01, 2.83652032e-01, 4.57474359e-02, 7.03055817e-01,\n",
       "          6.77181911e-01, 2.28491707e-01, 5.84849535e-01, 1.41737338e-01,\n",
       "          8.37577378e-01, 7.24001460e-01, 5.79920194e-02, 1.61872785e-01,\n",
       "          1.46068023e-01, 5.39283056e-01, 4.29941562e-01, 1.88703278e-01,\n",
       "          2.14264190e-01, 7.26839843e-02, 2.37729313e-01, 4.88299063e-01,\n",
       "          5.27492547e-02, 7.45285002e-01, 8.24919721e-01, 2.28716032e-02,\n",
       "          1.22885654e-01, 1.67646166e-01, 5.96773417e-01, 6.01120733e-01,\n",
       "          9.59032032e-01, 4.71649185e-01, 5.92491761e-01, 6.80711652e-01,\n",
       "          7.37147744e-01, 9.34308117e-01, 8.93421904e-01, 9.89623789e-02,\n",
       "          6.03019444e-01, 1.51082170e-01, 2.44847760e-01, 8.29147823e-01,\n",
       "          1.33634447e-01, 5.69380832e-01, 2.50170145e-01, 9.40416065e-01,\n",
       "          8.43664513e-01, 3.09087437e-01, 7.83493506e-01, 5.94645957e-01,\n",
       "          5.87566622e-01, 8.74885571e-01, 3.66329107e-01, 9.06941581e-01,\n",
       "          9.35144373e-01, 4.45820353e-03, 2.89127626e-04, 1.45357697e-01,\n",
       "          8.96048676e-01, 1.21591011e-01, 7.10379841e-01, 7.42831445e-01,\n",
       "          9.50914782e-01, 5.56416399e-01, 4.10325720e-01, 2.54906835e-01,\n",
       "          6.55666338e-01, 7.50934819e-01, 7.87296667e-01, 1.83843724e-01,\n",
       "          1.47592621e-01, 4.34726228e-01, 4.50220119e-01, 2.09755603e-01,\n",
       "          4.60060310e-01])}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Try it!\n",
    "# To-do: Turn the dataframe to a dicitonary of numpy arrays with only \"a\" and \"b\" columns\n",
    "def1.AsNumpy([\"\", \"\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3fbd633",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Multiple concurrent RDataFrame runs\n",
    "If your analysis needs multiple RDataFrames to run (for example multiple dataset samples, data vs simulation etc.), make use of `ROOT.RDF.RunGraphs` "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f342906a",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <RTaskArenaWrapper>: CPU Bandwith Control Active. Proceeding with 2 threads accordingly\n"
     ]
    }
   ],
   "source": [
    "ROOT.EnableImplicitMT()\n",
    "treename1 = \"myDataset\"\n",
    "filename1 = \"data/collections_dataset.root\"\n",
    "treename2 = \"dataset\"\n",
    "filename2 = \"data/example_file.root\"\n",
    "\n",
    "df1 = ROOT.RDataFrame(treename1, filename1)\n",
    "df2 = ROOT.RDataFrame(treename2, filename2)\n",
    "h1 = df1.Histo1D(\"px\")\n",
    "h2 = df2.Histo1D(\"a\")\n",
    " \n",
    "\n",
    "ROOT.RDF.RunGraphs((h1, h2))\n",
    "ROOT.DisableImplicitMT()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1b715694",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "c = ROOT.TCanvas()\n",
    "h1.Draw()\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "795a5420",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "c = ROOT.TCanvas()\n",
    "h2.Draw()\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "799b981e",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Re-defining values of a column\n",
    "\n",
    "Sometimes you might want to keep a column with the same name, but modify its values. This is available via the `Redefine` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "374e35a3",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+----+\n",
      "| Row | x  | \n",
      "+-----+----+\n",
      "| 0   | 42 | \n",
      "+-----+----+\n",
      "| 1   | 42 | \n",
      "+-----+----+\n",
      "| 2   | 42 | \n",
      "+-----+----+\n",
      "| 3   | 42 | \n",
      "+-----+----+\n",
      "| 4   | 42 | \n",
      "+-----+----+\n"
     ]
    }
   ],
   "source": [
    "df = ROOT.RDataFrame(5).Define(\"x\", \"42\")\n",
    "df.Display().Print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a7a7a553",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+-----+\n",
      "| Row | x   | \n",
      "+-----+-----+\n",
      "| 0   | 420 | \n",
      "+-----+-----+\n",
      "| 1   | 420 | \n",
      "+-----+-----+\n",
      "| 2   | 420 | \n",
      "+-----+-----+\n",
      "| 3   | 420 | \n",
      "+-----+-----+\n",
      "| 4   | 420 | \n",
      "+-----+-----+\n"
     ]
    }
   ],
   "source": [
    "df = df.Redefine(\"x\", \"x * 10\")\n",
    "df.Display().Print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e2e09b74",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+-------+\n",
      "| Row | x     | \n",
      "+-----+-------+\n",
      "| 0   | 42000 | \n",
      "+-----+-------+\n",
      "| 1   | 42000 | \n",
      "+-----+-------+\n",
      "| 2   | 42000 | \n",
      "+-----+-------+\n",
      "| 3   | 42000 | \n",
      "+-----+-------+\n",
      "| 4   | 42000 | \n",
      "+-----+-------+\n"
     ]
    }
   ],
   "source": [
    "# Try it!\n",
    "# To-do: Redifine the x column again with x * 100\n",
    "\n",
    "\n",
    "df.Display().Print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d820208f",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Notice how we could use the previous values of the `\"x\"` column to define the new values."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc296f7d",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Distributed RDataFrame\n",
    "\n",
    "An `RDataFrame` analysis written in Python can be executed both *locally* - possibly in parallel on the cores of the machine - and *distributedly* by offloading computations to external resources, which include:\n",
    "\n",
    "- [Spark](https://spark.apache.org/) and \n",
    "- [Dask](https://dask.org/) clusters. \n",
    "\n",
    "- This feature is enabled by the architecture depicted below.\n",
    "\n",
    "- It shows that RDataFrame computation graphs can be mapped to different kinds of resources via backends.\n",
    "\n",
    "- In this notebook we will exercise the Dask backend, which divides an `RDataFrame` input dataset in logical ranges and submits computations for each of those ranges to Dask resources.\n",
    "\n",
    "<img src=\"images/DistRDF_architecture.png\" alt=\"Distributed RDataFrame\">"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2731e8a",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Create a Dask client\n",
    "\n",
    "- In order to work with a Dask cluster we need a `Client` object.\n",
    "- It represents the connection to that cluster and allows to configure execution-related parameters (e.g. number of cores, memory). \n",
    "- The client object is just the intermediary between our client session and the cluster resources, \n",
    "- Dask supports many different resource managers.\n",
    "- We will follow the [Dask documentation](https://distributed.dask.org/en/stable/client.html) regarding the creation of a `Client`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a4e156e5",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "from dask.distributed import Client, LocalCluster\n",
    "cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=\"2GiB\")\n",
    "client = Client(cluster)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "601ffed1",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Create a ROOT dataframe\n",
    "\n",
    "We now create an RDataFrame based on the same dataset seen in the exercise [rdataframe-dimuon](exercises/rdataframe-dimuon.ipynb).\n",
    "\n",
    "A Dask `RDataFrame` receives two extra parameters: \n",
    "- the number of partitions to apply to the dataset (`npartitions`)\n",
    "- the `Client` object (`daskclient`). \n",
    "\n",
    "Besides this detail, a Dask `RDataFrame` is not different from a local `RDataFrame`: the analysis presented in this notebook would not change if we wanted to execute it locally."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "405cf12f",
   "metadata": {
    "slideshow": {
     "slide_type": "fragment"
    }
   },
   "outputs": [],
   "source": [
    "# Use a Dask RDataFrame\n",
    "RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame\n",
    "\n",
    "df = RDataFrame(\"h42\",\n",
    "                \"https://root.cern/files/h1big.root\",\n",
    "                npartitions=4,\n",
    "                daskclient=client)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "563a28e4",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Run your analysis unchanged\n",
    "\n",
    "- From now on, the rest of your application can be written **exactly** as we have seen with local RDataFrame. \n",
    "\n",
    "- The goal of the distributed RDataFrame module is to support all the traditional RDataFrame operations (those that make sense in a distributed context at least). \n",
    "\n",
    "- Currently only a subset of those is available and can be found in the corresponding [section of the documentation](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#distrdf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "43562f8d",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of events after processing: 283813\n",
      "Mean of column 'mpt': 0.13190819625023323\n",
      "CPU times: user 474 ms, sys: 65.7 ms, total: 540 ms\n",
      "Wall time: 12.7 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "df1 = df.Filter(\"nevent > 1\")\n",
    "df2 = df1.Define(\"mpt\",\"sqrt(xpt*xpt + ypt*ypt)\")\n",
    "c = df.Count()\n",
    "m = df2.Mean(\"mpt\")\n",
    "print(f\"Number of events after processing: {c.GetValue()}\")\n",
    "print(f\"Mean of column 'mpt': {m.GetValue()}\")"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
